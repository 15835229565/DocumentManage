<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="$(TargetDir)DM.T4.dll"#>
<#@ import namespace="System" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="System.Text.RegularExpressions"#>
<#@ import namespace="DM.T4"#>
<#@ include file="$(TargetDir)ModelAuto.ttinclude"#>
<# var manager2 = new Manager(Host, GenerationEnvironment, true) { OutputPath = Path.GetDirectoryName(Host.TemplateFile)}; #>

<# 
ModelManager manager = new ModelManager();
List<string> list=manager.GetTableList();
List<FK> listFK=manager. GetFK();
#>

<# 
    foreach (var item in list)
    {
        string tableName=item;
        DataTable table= manager.GetTableSchema(tableName);
		string strTableMemo=string.Empty;
		if(table!=null&&table.Rows.Count>0)
        {
			 strTableMemo=table.Rows[0]["表说明"].ToString();
		}
 #>

 <# 
        manager2.StartBlock(tableName+".cs");
 #>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码从T4模板生成。
//     黄正辉（623128629@qq.com）
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Data.SqlClient;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Collections.Generic;
namespace DM.Domain
{
    /// <summary>	
    /// 数据表实体类：<#= strTableMemo #> (<#= tableName #>)
    /// </summary>
    [Serializable()]
    public partial class <#= tableName #>:BaseModel
    {
<#
		//查找主表是当前表的外键表
	List<FK> lstWjTables=listFK.FindAll(p=>p.ZJ_Table==tableName);
		//查找外键表是当前表的主表
	List<FK> lstzjTables=listFK.FindAll(p=>p.WJ_Table==tableName);
foreach(DataRow row in table.Rows)
{
	string strFieldMemo=(row["备注"] is DBNull)?"":row["备注"].ToString();
#>
	   private <#= manager.TransFromSqlType(row["数据类型"].ToString(),row["允许空"].ToString())#> _<#=row["字段名"]#>;
       /// <summary>
       /// <#=string.IsNullOrEmpty(strFieldMemo)? row["字段名"]:strFieldMemo#>
       /// </summary>  
       <#= row["主键"].ToString()=="1"?"[Key]":""#> <#= row["是否自增标识"].ToString()=="1"?"[DatabaseGenerated(DatabaseGeneratedOption.Identity)]":""#>
       public <#= manager.TransFromSqlType(row["数据类型"].ToString(),row["允许空"].ToString())#> <#=row["字段名"]#>
	   { 
            get
            {
                BeforeGetProperty("<#=row["字段名"]#>", _<#=row["字段名"]#>);
                return _<#=row["字段名"]#>;
            }
            set
            {
                if(!BeforeSetProperty("<#=row["字段名"]#>", _<#=row["字段名"]#>))
                    return;
                _<#=row["字段名"]#>=value;
                AfterSetProperty("<#=row["字段名"]#>", _<#=row["字段名"]#>);
             }
		}
<#
}
//输出外键表
if(lstWjTables!=null&&lstWjTables.Count>0)
{
    foreach (var tb in lstWjTables)
    {
#>
	   private List<<#=tb.WJ_Table#>> _lst<#=tb.WJ_Table#>s = new List<<#=tb.WJ_Table#>>();     
       public List<<#=tb.WJ_Table#>> Lst<#=tb.WJ_Table#>s
	   { 
            get
            {
                BeforeGetProperty("Lst<#=tb.WJ_Table#>s",_lst<#=tb.WJ_Table#>s);
                return _lst<#=tb.WJ_Table#>s;
            }
            set
            { 
                if(!BeforeSetProperty("Lst<#=tb.WJ_Table#>s",_lst<#=tb.WJ_Table#>s))
                    return;
                _lst<#=tb.WJ_Table#>s=value;
                AfterSetProperty("Lst<#=tb.WJ_Table#>s",_lst<#=tb.WJ_Table#>s);
            }
		}
<#
		}
}
//输出外键表
if(lstzjTables!=null&&lstzjTables.Count>0)
{
    foreach (var tb in lstzjTables)
    {
#>	  
	   private <#=tb.ZJ_Table#> _<#=tb.ZJ_Table#> ;    
       [ForeignKey("<#=tb.WJ_Field#>")] 
       public <#=tb.ZJ_Table#> <#=tb.ZJ_Table#>
	   { 
            get
            {
                BeforeGetProperty("<#=tb.ZJ_Table#>",_<#=tb.ZJ_Table#> );
                return _<#=tb.ZJ_Table#>;
            }
            set
            {
                if(!BeforeSetProperty("<#=tb.ZJ_Table#>",_<#=tb.ZJ_Table#>))
                    return;
                _<#=tb.ZJ_Table#>=value;
                AfterSetProperty("<#=tb.ZJ_Table#>",_<#=tb.ZJ_Table#>);
            }
		}
<#
		}
}

#>
    }
}

<# manager2.EndBlock(); #>

<#
    }  
 #>     
   
<# manager2.Process(true); #>
